const { mysqlConnection, mysqlClosed } = require('../modules/mysqlConnection')
mysqlConnection().then(() =>
{
    const app = require('../app');
    const debug = require('debug')('myapp:server');
    const http = require('http');

    const port = normalizePort('3002');
    app.set('port', port);

    const server = http.createServer(app);
    require('../modules/io').ioStart(server)

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    process.on("SIGINT", stopServer);
    async function stopServer()
    {
        await mysqlClosed()
        server.close()
    }

    function normalizePort(val)
    {
        var port = parseInt(val, 10);
        if(isNaN(port))return val;

        if(port >= 0)return port;
        return false;

    }

    function onError(error)
    {
        if(error.syscall !== 'listen') throw error;

        var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

        switch(error.code)
        {
            case 'EACCES':
            {
                console.error(bind + ' requires elevated privileges');
                process.exit(1);

                mysqlClosed()
                break;
            }
            case 'EADDRINUSE':
            {
                console.error(bind + ' is already in use');
                process.exit(1);

                mysqlClosed()
                break;
            }
            default: throw error;
        }
    }

    function onListening()
    {
        var addr = server.address();
        var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

        debug('Listening on ' + bind);
    }
})
